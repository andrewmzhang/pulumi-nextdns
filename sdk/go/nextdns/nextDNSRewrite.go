// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nextdns 

import (
	"context"
	"reflect"

	"errors"
	"github.com/andrewmzhang/pulumi-nextdns/sdk/go/nextdns/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A NextDNS Rewrite into a pulumi resource
type NextDNSRewrite struct {
	pulumi.CustomResourceState

	// IP Address or Domain to rewrite domain name to.
	Content pulumi.StringOutput `pulumi:"content"`
	// Domain name to apply rewrite to.
	Name pulumi.StringOutput `pulumi:"name"`
	// Profile Id to apply rewrite to. This overrides the default profile id.
	ProfileId pulumi.StringPtrOutput `pulumi:"profileId"`
}

// NewNextDNSRewrite registers a new resource with the given unique name, arguments, and options.
func NewNextDNSRewrite(ctx *pulumi.Context,
	name string, args *NextDNSRewriteArgs, opts ...pulumi.ResourceOption) (*NextDNSRewrite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NextDNSRewrite
	err := ctx.RegisterResource("nextdns:index:NextDNSRewrite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNextDNSRewrite gets an existing NextDNSRewrite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNextDNSRewrite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NextDNSRewriteState, opts ...pulumi.ResourceOption) (*NextDNSRewrite, error) {
	var resource NextDNSRewrite
	err := ctx.ReadResource("nextdns:index:NextDNSRewrite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NextDNSRewrite resources.
type nextDNSRewriteState struct {
}

type NextDNSRewriteState struct {
}

func (NextDNSRewriteState) ElementType() reflect.Type {
	return reflect.TypeOf((*nextDNSRewriteState)(nil)).Elem()
}

type nextDNSRewriteArgs struct {
	// IP Address or Domain to rewrite domain name to.
	Content string `pulumi:"content"`
	// Domain name to apply rewrite to.
	Name string `pulumi:"name"`
	// Profile Id to apply rewrite to. This overrides the default profile id.
	ProfileId *string `pulumi:"profileId"`
}

// The set of arguments for constructing a NextDNSRewrite resource.
type NextDNSRewriteArgs struct {
	// IP Address or Domain to rewrite domain name to.
	Content pulumi.StringInput
	// Domain name to apply rewrite to.
	Name pulumi.StringInput
	// Profile Id to apply rewrite to. This overrides the default profile id.
	ProfileId pulumi.StringPtrInput
}

func (NextDNSRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nextDNSRewriteArgs)(nil)).Elem()
}

type NextDNSRewriteInput interface {
	pulumi.Input

	ToNextDNSRewriteOutput() NextDNSRewriteOutput
	ToNextDNSRewriteOutputWithContext(ctx context.Context) NextDNSRewriteOutput
}

func (*NextDNSRewrite) ElementType() reflect.Type {
	return reflect.TypeOf((**NextDNSRewrite)(nil)).Elem()
}

func (i *NextDNSRewrite) ToNextDNSRewriteOutput() NextDNSRewriteOutput {
	return i.ToNextDNSRewriteOutputWithContext(context.Background())
}

func (i *NextDNSRewrite) ToNextDNSRewriteOutputWithContext(ctx context.Context) NextDNSRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NextDNSRewriteOutput)
}

// NextDNSRewriteArrayInput is an input type that accepts NextDNSRewriteArray and NextDNSRewriteArrayOutput values.
// You can construct a concrete instance of `NextDNSRewriteArrayInput` via:
//
//	NextDNSRewriteArray{ NextDNSRewriteArgs{...} }
type NextDNSRewriteArrayInput interface {
	pulumi.Input

	ToNextDNSRewriteArrayOutput() NextDNSRewriteArrayOutput
	ToNextDNSRewriteArrayOutputWithContext(context.Context) NextDNSRewriteArrayOutput
}

type NextDNSRewriteArray []NextDNSRewriteInput

func (NextDNSRewriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NextDNSRewrite)(nil)).Elem()
}

func (i NextDNSRewriteArray) ToNextDNSRewriteArrayOutput() NextDNSRewriteArrayOutput {
	return i.ToNextDNSRewriteArrayOutputWithContext(context.Background())
}

func (i NextDNSRewriteArray) ToNextDNSRewriteArrayOutputWithContext(ctx context.Context) NextDNSRewriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NextDNSRewriteArrayOutput)
}

// NextDNSRewriteMapInput is an input type that accepts NextDNSRewriteMap and NextDNSRewriteMapOutput values.
// You can construct a concrete instance of `NextDNSRewriteMapInput` via:
//
//	NextDNSRewriteMap{ "key": NextDNSRewriteArgs{...} }
type NextDNSRewriteMapInput interface {
	pulumi.Input

	ToNextDNSRewriteMapOutput() NextDNSRewriteMapOutput
	ToNextDNSRewriteMapOutputWithContext(context.Context) NextDNSRewriteMapOutput
}

type NextDNSRewriteMap map[string]NextDNSRewriteInput

func (NextDNSRewriteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NextDNSRewrite)(nil)).Elem()
}

func (i NextDNSRewriteMap) ToNextDNSRewriteMapOutput() NextDNSRewriteMapOutput {
	return i.ToNextDNSRewriteMapOutputWithContext(context.Background())
}

func (i NextDNSRewriteMap) ToNextDNSRewriteMapOutputWithContext(ctx context.Context) NextDNSRewriteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NextDNSRewriteMapOutput)
}

type NextDNSRewriteOutput struct{ *pulumi.OutputState }

func (NextDNSRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NextDNSRewrite)(nil)).Elem()
}

func (o NextDNSRewriteOutput) ToNextDNSRewriteOutput() NextDNSRewriteOutput {
	return o
}

func (o NextDNSRewriteOutput) ToNextDNSRewriteOutputWithContext(ctx context.Context) NextDNSRewriteOutput {
	return o
}

// IP Address or Domain to rewrite domain name to.
func (o NextDNSRewriteOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *NextDNSRewrite) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Domain name to apply rewrite to.
func (o NextDNSRewriteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NextDNSRewrite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Profile Id to apply rewrite to. This overrides the default profile id.
func (o NextDNSRewriteOutput) ProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NextDNSRewrite) pulumi.StringPtrOutput { return v.ProfileId }).(pulumi.StringPtrOutput)
}

type NextDNSRewriteArrayOutput struct{ *pulumi.OutputState }

func (NextDNSRewriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NextDNSRewrite)(nil)).Elem()
}

func (o NextDNSRewriteArrayOutput) ToNextDNSRewriteArrayOutput() NextDNSRewriteArrayOutput {
	return o
}

func (o NextDNSRewriteArrayOutput) ToNextDNSRewriteArrayOutputWithContext(ctx context.Context) NextDNSRewriteArrayOutput {
	return o
}

func (o NextDNSRewriteArrayOutput) Index(i pulumi.IntInput) NextDNSRewriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NextDNSRewrite {
		return vs[0].([]*NextDNSRewrite)[vs[1].(int)]
	}).(NextDNSRewriteOutput)
}

type NextDNSRewriteMapOutput struct{ *pulumi.OutputState }

func (NextDNSRewriteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NextDNSRewrite)(nil)).Elem()
}

func (o NextDNSRewriteMapOutput) ToNextDNSRewriteMapOutput() NextDNSRewriteMapOutput {
	return o
}

func (o NextDNSRewriteMapOutput) ToNextDNSRewriteMapOutputWithContext(ctx context.Context) NextDNSRewriteMapOutput {
	return o
}

func (o NextDNSRewriteMapOutput) MapIndex(k pulumi.StringInput) NextDNSRewriteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NextDNSRewrite {
		return vs[0].(map[string]*NextDNSRewrite)[vs[1].(string)]
	}).(NextDNSRewriteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NextDNSRewriteInput)(nil)).Elem(), &NextDNSRewrite{})
	pulumi.RegisterInputType(reflect.TypeOf((*NextDNSRewriteArrayInput)(nil)).Elem(), NextDNSRewriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NextDNSRewriteMapInput)(nil)).Elem(), NextDNSRewriteMap{})
	pulumi.RegisterOutputType(NextDNSRewriteOutput{})
	pulumi.RegisterOutputType(NextDNSRewriteArrayOutput{})
	pulumi.RegisterOutputType(NextDNSRewriteMapOutput{})
}
