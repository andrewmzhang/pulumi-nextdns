# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NextDNSRewriteArgs', 'NextDNSRewrite']

@pulumi.input_type
class NextDNSRewriteArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 profile_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a NextDNSRewrite resource.
        :param pulumi.Input[builtins.str] content: IP Address or Domain to rewrite domain name to.
        :param pulumi.Input[builtins.str] name: Domain name to apply rewrite to.
        :param pulumi.Input[builtins.str] profile_id: Profile Id to apply rewrite to. This overrides the default profile id.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        """
        IP Address or Domain to rewrite domain name to.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Domain name to apply rewrite to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Profile Id to apply rewrite to. This overrides the default profile id.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "profile_id", value)


@pulumi.type_token("nextdns:index:NextDNSRewrite")
class NextDNSRewrite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        A NextDNS Rewrite into a pulumi resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] content: IP Address or Domain to rewrite domain name to.
        :param pulumi.Input[builtins.str] name: Domain name to apply rewrite to.
        :param pulumi.Input[builtins.str] profile_id: Profile Id to apply rewrite to. This overrides the default profile id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NextDNSRewriteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NextDNS Rewrite into a pulumi resource

        :param str resource_name: The name of the resource.
        :param NextDNSRewriteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NextDNSRewriteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NextDNSRewriteArgs.__new__(NextDNSRewriteArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["profile_id"] = profile_id
        super(NextDNSRewrite, __self__).__init__(
            'nextdns:index:NextDNSRewrite',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NextDNSRewrite':
        """
        Get an existing NextDNSRewrite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NextDNSRewriteArgs.__new__(NextDNSRewriteArgs)

        __props__.__dict__["content"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["profile_id"] = None
        return NextDNSRewrite(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[builtins.str]:
        """
        IP Address or Domain to rewrite domain name to.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Domain name to apply rewrite to.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Profile Id to apply rewrite to. This overrides the default profile id.
        """
        return pulumi.get(self, "profile_id")

